cmake_minimum_required(VERSION 2.8)

project(android-boost)

#find patched boost directory
set(boost_root ${CMAKE_CURRENT_SOURCE_DIR}/ CACHE PATH 
    "Boost patched for android")

# message(STATUS
#     "=====================================
#     Boost directory ${CMAKE_CURRENT_SOURCE_DIR}/
#     Boost Root ${boost_root}
#     =====================================")
if(NOT EXISTS ${boost_root})
message(FATAL_ERROR
  "${boost_root} does not exist!
    Please run ${CMAKE_CURRENT_SOURCE_DIR}/get_boost.sh to get a patched copy of
    boost 1.45.0
    ")
endif()

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -DNO_BZIP2" )
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNO_BZIP2")

include_directories(${boost_root})

file(GLOB lib_srcs ${boost_root}/libs/system/src/*.cpp)

add_library( boost_system ${lib_srcs})

file(GLOB lib_srcs ${boost_root}/libs/filesystem/src/*.cpp)

add_library( boost_filesystem ${lib_srcs})

set(lib_dir ${boost_root}/libs/iostreams/src)
set(lib_srcs ${lib_dir}/file_descriptor.cpp   ${lib_dir}/gzip.cpp   ${lib_dir}/mapped_file.cpp   ${lib_dir}/zlib.cpp)

add_library( boost_iostreams ${lib_srcs})

file(GLOB lib_srcs ${boost_root}/libs/program_options/src/*.cpp)

add_library( boost_program_options ${lib_srcs})

file(GLOB lib_srcs ${boost_root}/libs/regex/src/*.cpp)

add_library( boost_regex ${lib_srcs})

file(GLOB lib_srcs ${boost_root}/libs/signals/src/*.cpp)

add_library( boost_signals ${lib_srcs})

file(GLOB lib_srcs ${boost_root}/libs/thread/src/pthread/*.cpp)

file(GLOB inc_srcs ${boost_root}/libs/thread/include/boost/thread/detail/*.hpp)

# include_directories(${boost_root}/libs/thread/include)
# include_directories(${boost_root}/libs/config/include)
# include_directories(${boost_root}/libs/core/include)
# include_directories(${boost_root}/libs/type_traits/include)
# include_directories(${boost_root}/libs/move/include)
# include_directories(${boost_root}/libs/assert/include)
# include_directories(${boost_root}/libs/static_assert/include)
# include_directories(${boost_root}/libs/mpl/include)
# include_directories(${boost_root}/libs/bind/include)
# include_directories(${boost_root}/libs/atomic/include)
# include_directories(${boost_root}/libs/system/include)
# include_directories(${boost_root}/libs/predef/include)
# include_directories(${boost_root}/libs/date_time/include)
# include_directories(${boost_root}/libs/throw_exception/include)
# include_directories(${boost_root}/libs/smart_ptr/include)
# include_directories(${boost_root}/libs/utility/include)
# include_directories(${boost_root}/libs/preprocessor/include)
# include_directories(${boost_root}/libs/chrono/include)
# include_directories(${boost_root}/libs/ratio/include)
# include_directories(${boost_root}/libs/integer/include)
# include_directories(${boost_root}/libs/io/include)
# include_directories(${boost_root}/libs/functional/include)
# include_directories(${boost_root}/libs/detail/include)
# include_directories(${boost_root}/libs/tuple/include)

include_directories(${boost_root}/libs/accumulators/include)
include_directories(${boost_root}/libs/algorithm/include)
include_directories(${boost_root}/libs/align/include)
include_directories(${boost_root}/libs/any/include)
include_directories(${boost_root}/libs/array/include)
include_directories(${boost_root}/libs/asio/include)
include_directories(${boost_root}/libs/assert/include)
include_directories(${boost_root}/libs/assign/include)
include_directories(${boost_root}/libs/atomic/include)
include_directories(${boost_root}/libs/bimap/include)
include_directories(${boost_root}/libs/bind/include)
include_directories(${boost_root}/libs/chrono/include)
include_directories(${boost_root}/libs/chrono/stopwatches/include)
include_directories(${boost_root}/libs/circular_buffer/include)
include_directories(${boost_root}/libs/compatibility/include)
include_directories(${boost_root}/libs/compute/include)
include_directories(${boost_root}/libs/concept_check/include)
include_directories(${boost_root}/libs/config/include)
include_directories(${boost_root}/libs/container/include)
include_directories(${boost_root}/libs/context/include)
include_directories(${boost_root}/libs/conversion/include)
include_directories(${boost_root}/libs/convert/include)
include_directories(${boost_root}/libs/core/include)
include_directories(${boost_root}/libs/coroutine/include)
include_directories(${boost_root}/libs/coroutine2/include)
include_directories(${boost_root}/libs/crc/include)
include_directories(${boost_root}/libs/date_time/include)
include_directories(${boost_root}/libs/detail/include)
include_directories(${boost_root}/libs/disjoint_sets/include)
include_directories(${boost_root}/libs/dll/include)
include_directories(${boost_root}/libs/dynamic_bitset/include)
include_directories(${boost_root}/libs/endian/include)
include_directories(${boost_root}/libs/exception/include)
include_directories(${boost_root}/libs/filesystem/include)
include_directories(${boost_root}/libs/flyweight/include)
include_directories(${boost_root}/libs/foreach/include)
include_directories(${boost_root}/libs/format/include)
include_directories(${boost_root}/libs/function/include)
include_directories(${boost_root}/libs/function_types/include)
include_directories(${boost_root}/libs/functional/include)
include_directories(${boost_root}/libs/fusion/include)
include_directories(${boost_root}/libs/fusion/include/boost/fusion/include)
include_directories(${boost_root}/libs/geometry/include)
include_directories(${boost_root}/libs/gil/include)
include_directories(${boost_root}/libs/graph/include)
include_directories(${boost_root}/libs/graph_parallel/include)
include_directories(${boost_root}/libs/hana/include)
include_directories(${boost_root}/libs/heap/include)
include_directories(${boost_root}/libs/icl/include)
include_directories(${boost_root}/libs/integer/include)
include_directories(${boost_root}/libs/interprocess/include)
include_directories(${boost_root}/libs/intrusive/include)
include_directories(${boost_root}/libs/io/include)
include_directories(${boost_root}/libs/iostreams/include)
include_directories(${boost_root}/libs/iterator/include)
include_directories(${boost_root}/libs/lambda/include)
include_directories(${boost_root}/libs/lexical_cast/include)
include_directories(${boost_root}/libs/local_function/include)
include_directories(${boost_root}/libs/locale/include)
include_directories(${boost_root}/libs/lockfree/include)
include_directories(${boost_root}/libs/log/include)
include_directories(${boost_root}/libs/logic/include)
include_directories(${boost_root}/libs/math/include)
include_directories(${boost_root}/libs/metaparse/include)
include_directories(${boost_root}/libs/move/include)
include_directories(${boost_root}/libs/mpi/include)
include_directories(${boost_root}/libs/mpl/include)
include_directories(${boost_root}/libs/mpl/preprocessed/include)
include_directories(${boost_root}/libs/msm/include)
include_directories(${boost_root}/libs/multi_array/include)
include_directories(${boost_root}/libs/multi_index/include)
include_directories(${boost_root}/libs/multiprecision/include)
include_directories(${boost_root}/libs/numeric/conversion/include)
include_directories(${boost_root}/libs/numeric/interval/include)
include_directories(${boost_root}/libs/numeric/odeint/include)
include_directories(${boost_root}/libs/numeric/ublas/IDEs/qtcreator/include)
include_directories(${boost_root}/libs/numeric/ublas/include)
include_directories(${boost_root}/libs/optional/include)
include_directories(${boost_root}/libs/parameter/include)
include_directories(${boost_root}/libs/phoenix/include)
include_directories(${boost_root}/libs/phoenix/test/include)
include_directories(${boost_root}/libs/polygon/include)
include_directories(${boost_root}/libs/pool/include)
include_directories(${boost_root}/libs/predef/include)
include_directories(${boost_root}/libs/preprocessor/include)
include_directories(${boost_root}/libs/program_options/include)
include_directories(${boost_root}/libs/property_map/include)
include_directories(${boost_root}/libs/property_tree/include)
include_directories(${boost_root}/libs/proto/include)
include_directories(${boost_root}/libs/ptr_container/include)
include_directories(${boost_root}/libs/python/include)
include_directories(${boost_root}/libs/random/include)
include_directories(${boost_root}/libs/range/include)
include_directories(${boost_root}/libs/ratio/include)
include_directories(${boost_root}/libs/rational/include)
include_directories(${boost_root}/libs/regex/include)
include_directories(${boost_root}/libs/scope_exit/include)
include_directories(${boost_root}/libs/serialization/include)
include_directories(${boost_root}/libs/signals/include)
include_directories(${boost_root}/libs/signals2/include)
include_directories(${boost_root}/libs/smart_ptr/include)
include_directories(${boost_root}/libs/sort/include)
include_directories(${boost_root}/libs/spirit/include)
include_directories(${boost_root}/libs/spirit/include/boost/spirit/include)
include_directories(${boost_root}/libs/spirit/include/boost/spirit/repository/include)
include_directories(${boost_root}/libs/statechart/include)
include_directories(${boost_root}/libs/static_assert/include)
include_directories(${boost_root}/libs/system/include)
include_directories(${boost_root}/libs/test/include)
include_directories(${boost_root}/libs/thread/include)
include_directories(${boost_root}/libs/throw_exception/include)
include_directories(${boost_root}/libs/timer/include)
include_directories(${boost_root}/libs/tokenizer/include)
include_directories(${boost_root}/libs/tr1/include)
include_directories(${boost_root}/libs/tti/include)
include_directories(${boost_root}/libs/tuple/include)
include_directories(${boost_root}/libs/type_erasure/include)
include_directories(${boost_root}/libs/type_index/include)
include_directories(${boost_root}/libs/type_traits/include)
include_directories(${boost_root}/libs/typeof/include)
include_directories(${boost_root}/libs/units/include)
include_directories(${boost_root}/libs/unordered/include)
include_directories(${boost_root}/libs/utility/include)
include_directories(${boost_root}/libs/uuid/include)
include_directories(${boost_root}/libs/variant/include)
include_directories(${boost_root}/libs/vmd/include)
include_directories(${boost_root}/libs/wave/include)
include_directories(${boost_root}/libs/winapi/include)
include_directories(${boost_root}/libs/xpressive/include)
include_directories(${boost_root}/tools/auto_index/include)
include_directories(${boost_root}/tools/build/example/libraries/util/foo/include)
include_directories(${boost_root}/tools/build/example/pch/include)
include_directories(${boost_root}/tools/build/src/engine/boehm_gc/include)
include_directories(${boost_root}/tools/build/test/railsys/libx/include)
include_directories(${boost_root}/tools/build/test/railsys/program/include)
include_directories(${boost_root}/tools/quickbook/test/include)

message(STATUS
    "=====================================
    Boost thread ${lib_srcs}
    Boost thread ${inc_srcs}
    =====================================")

add_library( boost_thread ${lib_srcs} ${inc_srcs})

file(GLOB lib_srcs ${boost_root}/libs/date_time/src/gregorian/*.cpp ${boost_root}/libs/date_time/src/posix_time/*.cpp)

add_library( boost_date_time ${lib_srcs})

#target_link_libraries(boost_filesystem boost_system)

set(Boost_INCLUDE_DIRS ${boost_root})
set(Boost_LIBRARIES boost_filesystem boost_system boost_program_options boost_iostreams boost_date_time)
set(Boost_LINK_DIRS ${LIBRARY_OUTPUT_PATH})

configure_file(${CMAKE_SOURCE_DIR}/BoostConfig.cmake.in
               ${CMAKE_BINARY_DIR}/BoostConfig.cmake @ONLY)
               
install(DIRECTORY ${boost_root}/boost DESTINATION ${CMAKE_INSTALL_PREFIX}/include)
install(TARGETS boost_system DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
install(TARGETS boost_filesystem DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
install(TARGETS boost_program_options DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
install(TARGETS boost_iostreams DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
install(TARGETS boost_regex DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
install(TARGETS boost_signals DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
install(TARGETS boost_thread DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
install(TARGETS boost_date_time DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
